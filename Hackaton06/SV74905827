<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hackaton06</title>
    <link rel="stylesheet" href="miestilo.css">
</head>

<body>
    <form id="formulario">
        <h2>Servicio de Reparación</h2> 
        <label for="nombreCliente">Nombre del Cliente:</label>
        <input type="text" id="nombreCliente" name="nombreCliente" required>

        <label for="modelo">Modelo</label>
        <input type="text" id="modelo" name="modelo" required>

        <label for="numeroSerie">Numero de Serie del Celular</label>
        <input type="text" id="numeroSerie" name="numeroSerie" required>
        <button type="button" onclick="generarNumeroSerie()">Generar</button><br><br>

        <label for="imei">IMEI</label>
        <input type="text" id="imei" name="imei" required>
        <button type="button" onclick="generarImei()">Generar</button><br><br>

        <button type="button" onclick="validar()">Validar</button>
        <button type="button" class="cancelar" onclick="cancelar()">Cancelar</button>
    </form>

    <br><br>

    <table id="tablaRegistro" border="1">
        <tr>
            <th>Nombre</th>          
            <th>Modelo</th>
            <th>numSerie</th>
            <th>IMEI</th>
            <th>Fecha</th>
            <th>Autorizacion</th>
            <th>Abono50%</th>
            <th onclick="editarCampo('Diagnostico')">Diagnostico</th>
            <th onclick="editarCampo('Estado')">Estado</th>
            <th>tecnico</th>
        </tr>

    </table>

    <script src="miscrip.js"></script>

</body>
</html>

/**************************************************************/

class datosReparacion{
    constructor(nombreCliente, modelo, numeroSerie, imei, fechaHora, autorizacion, abono50, diagnostico, estado, tecnico){
        this.nombreCliente= nombreCliente;
        this.modelo= modelo;
        this.numeroSerie= numeroSerie;
        this.imei= imei;
        this.fechaHora= fechaHora;
        this.autorizacion= autorizacion;
        this.abono50= abono50;
        this.diagnostico= diagnostico;
        this.estado= estado;
        this.tecnico= tecnico;
    }
}
const listaClientes=[];
// Funciones para interactuar con los datos del formulario
function generarNumeroSerie() {
    // Generar un número de serie aleatorio de 14 cifras
    const numeroSerieGenerado = Math.floor(Math.random() * 90000000000000) + 10000000000000;

    // Actualizar directamente el campo en el formulario
    document.getElementById('numeroSerie').value = numeroSerieGenerado;
}


function generarImei() {
    // Generar un número de serie aleatorio de 14 cifras
    const imeiGenerado = Math.floor(Math.random() * 90000000000000) + 10000000000000;

    // Actualizar directamente el campo en el formulario
    document.getElementById('imei').value = imeiGenerado;   
}

//validadar el imei
function consultarimeiRobado(imei) {
    // Simulamos la respuesta con un valor booleano aleatorio
    return Math.random() < 0.5; // 50% de probabilidad de estar reportado como robado
}

function validar() {
    
    // Obtener datos del formulario
        const nombreCliente = document.getElementById('nombreCliente').value;
        const modelo = document.getElementById('modelo').value;
        const numeroSerie = document.getElementById('numeroSerie').value;
        const imei = document.getElementById('imei').value;

        const datoReparacion = new datosReparacion(nombreCliente, modelo, numeroSerie, );

        // Realizar la consulta ficticia para verificar si está reportado como robado
        const estaReportado = consultarimeiRobado(imei);

        // Mostrar un alert según el resultado de la consulta
    if (estaReportado) {
        alert('¡Alerta! Este IMEI está reportado como robado.');
        document.getElementById('nombreCliente').value = '';
        document.getElementById('modelo').value = '';
        document.getElementById('numeroSerie').value = '';
        document.getElementById('imei').value = '';
    } else {
        alert('El IMEI no está reportado como robado. Puede proceder con la validación.');
        agregarCliente();
    }

    // Lógica de validación y manejo de datos
    // Ejemplo: if (validarDatos(datosReparacion)) { // Realizar acciones si los datos son válidos }
    }

    function cancelar() {
        // Lógica para cancelar la operación o reiniciar el formulario
    }

    /** funcionalamcena en la tabla */
function agregarCliente() {
    const nombre = document.getElementById("nombreCliente").value;
    const modelo = document.getElementById("modelo").value;
    const numeroSerie = document.getElementById("numeroSerie").value;
    const imei = document.getElementById("imei").value;
    const fechaHora = new Date().toLocaleString(); // Captura la fecha y hora actual
    const autorizacion = prompt("Ingrese la autorización:");
    const abono50 = prompt("¿Abonó el 50%? (Sí/No):");
    const diagnostico = prompt("Ingrese el diagnóstico:");
    const estado = prompt("Ingrese el estado:");
    
    
    const tabla = document.getElementById("tablaRegistro");
    const fila = tabla.insertRow();

    const celdas = [
        nombre, modelo, numeroSerie, imei, fechaHora, autorizacion, abono50, diagnostico, estado, crearSelectTecnico()
    ];

    celdas.forEach((valor) => {
        const celda = fila.insertCell();
        celda.innerHTML = valor;
        celda.onclick = function () {
            if (celda.cellIndex === 7 || celda.cellIndex === 8) {
                editarCampo(celda);
            }
        };
    });
    const datosReparacion = new DatosReparacion(nombre, modelo, numeroSerie, imei, fechaHora, autorizacion, abono50, diagnostico, estado);
    listaClientes.push(datosReparacion);

    // Actualizar sessionStorage con la lista actualizada
    sessionStorage.setItem('listaClientes', JSON.stringify(listaClientes));
}

function editarCampo(celda) {
    const valorActual = celda.innerHTML;
    const nuevoValor = prompt("Editar:", valorActual);

    if (nuevoValor !== null) {
        celda.innerHTML = nuevoValor;

    }

}
function crearSelectTecnico() {
    const select = document.createElement("select");
    const opciones = ["PAblo bermudez (Android)", "Manuel torres(Android/Ios)", "Flor Cervantes (Ios)", "Micahel flores (Android/Ios)"];

    opciones.forEach((opcion) => {
        const option = document.createElement("option");
        option.value = opcion;
        option.text = opcion;
        select.add(option);
    });

    return select.outerHTML; // Convertir el elemento select a HTML para mostrarlo en la celda
}

function cargarDatosDesdeSessionStorage() {
    const datosAlmacenados = sessionStorage.getItem('listaClientes');
    if (datosAlmacenados) {
        // Si hay datos almacenados, convertirlos de nuevo a objetos y agregar a la listaClientes
        const datosParseados = JSON.parse(datosAlmacenados);
        datosParseados.forEach((datos) => {
            const datosReparacion = new DatosReparacion(datos.nombreCliente, datos.modelo, datos.numeroSerieEquipo, datos.imei, datos.fechaHora, datos.autorizacion, datos.abono50, datos.diagnostico, datos.estado);
            listaClientes.push(datosReparacion);
        });
    }
}

// Llama a la función para cargar datos desde sessionStorage al iniciar la página
cargarDatosDesdeSessionStorage();


/***********************************************************************/

body{
    font-family: Arial, Helvetica, sans-serif;
    margin: 20px;
    background-color: rgb(63, 63, 63);
    color: white;
}

form{
    max-width: 500px;
    margin: auto;
}

label{
    display: block; /*se convierte en bloque una abajo de otro en orden*/
    margin-bottom: 8px; /*separacion*/
}

input{
    width: 100%; /*casilla*/
    padding: 8px; /*grueso de la casilla*/
    margin-bottom: 16px;
    box-sizing: border-box;
}

button{
    background-color: #9de49c; /*color fondo del boton*/
    color: rgb(0, 0, 0); /*color de letra del boton*/
    padding: 10px 15px; /*llargo y ancho del btn*/
    border: none;
    border-radius: 40px; /*vuelve circular las esquinas del btn*/
    cursor: pointer; /*ponemos el maus encima del btn cambia a una manito*/
    font-size: 16px; /*tamaño de letra del btn*/
}

button:hover{
    background-color: rgb(134, 147, 244);
}

button.cancelar:hover {
    background-color: #e25858;   
}

table{
    width: 100%; /*espacio de la tabla*/
    border-collapse: collapse; /*estetita*/
    margin-top: 10px; 
    overflow: hidden; /*borde redondo de la tabla*/
    border-radius: 10px; 
    background-color: #9de49c; /*fonde de la tabla*/
    color: rgb(0, 0, 0);
}

th, td {
    
    padding: 15px; /*largo y ancho de las casillas de la table*/
    text-align: center;
}

th {
    text-align: center;
    background-color: #9de49c;
}

* Estilo para el formulario flotante */
    #formularioFlotante {
    display: none;
    position: fixed;
    top: 900%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: rgb(0, 0, 0);
    padding: 20px;
    border: 1px solid #fa0000;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    z-index: 1000;
}

#formularioFlotante label {
    display: block;
    margin-bottom: 10px;
}

#formularioFlotante textarea,
#formularioFlotante select {
    width: 100%;
    margin-bottom: 10px;
}

#formularioFlotante button {
    margin-right: 10px;
}

.mensaje-notificacion {
    position: fixed;
    top: 10px;
    right: 10px;
    padding: 10px;
    background-color: #4CAF50;
    color: white;
    border-radius: 5px;
    opacity: 1;
    transition: opacity 1s ease-in-out;
}
